#!/usr/bin/env groovy
pipeline {
    agent any
    environment {
        XL_VALUE_BUILD_ID = "1.0.${env.BUILD_ID}"

        XL_DEPLOY_URL = "http://xl-deploy:4516"
        XL_DEPLOY_CREDENTIALS = credentials("xld-credentials")
    }

    stages {
        stage ("checkout") {
            steps {
                checkout scm
            }
        }
        stage ("check java") {
            steps {
                sh "java -version"
            }
        }
        stage ("clean") {
            steps {
                sh "cd store && chmod +x ./gradlew"
                sh "cd store && ./gradlew clean --no-daemon"
                echo "Clean Done"
            }
        }
        stage ("npm install") {
            steps {
                sh "cd store && ./gradlew npmInstall -PnodeInstall --no-daemon"
            }
        }
        stage ("backend tests") {
            steps {
                script {
                    try {
                        sh "cd store && ./gradlew test -PnodeInstall --no-daemon"
                    } catch(err) {
                        throw err
                    } finally {
                        junit '**/build/**/TEST-*.xml'
                    }
                }
            }
        }
        stage ("frontend tests") {
            steps {
                script {
                    try {
                        sh "cd store && ./gradlew npm_test -PnodeInstall --no-daemon"
                    } catch(err) {
                        throw err
                    } finally {
                        junit '**/build/test-results/jest/TESTS-*.xml'
                    }
                }
            }
        }
        stage ("packaging") {
            steps {
                sh "cd store && ./gradlew bootWar -x test -Pprod -PnodeInstall --no-daemon"
                archiveArtifacts artifacts: '**/build/libs/*.war', fingerprint: true
            }
        }


        stage ("build and publish docker") {
            steps {
                script {
                    def dockerImage
                    stage ("build docker") {
                        sh "cp -R store/src/main/docker store/build/"
                        sh "cp store/build/libs/*.war store/build/docker/"
                        dockerImage = docker.build("${env.DOCKER_USER}/ecommerce-store", 'store/build/docker')
                    }
                    stage ("publish docker") {
                        docker.withRegistry('https://index.docker.io/v1/', 'docker-login') {
                            dockerImage.tag("1.0.${env.BUILD_ID}")
                            dockerImage.push("1.0.${env.BUILD_ID}")
                        }
                    }
                }
            }
        }


        stage ("push xld package for store") {
            steps {
                sh "cd store && ./gradlew clean  sourcesForRelease -PimageTag=1.0.${env.BUILD_ID} --no-daemon"
                sh "./xlw apply -f xebialabs/xld-kubernetes-store-app.yaml"
            }
        }

    }
}
